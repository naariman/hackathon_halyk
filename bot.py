import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from openai import OpenAI
import time
import requests, json

url = "https://api.openai.com/v1/chat/completions"

headers = {
    "Content-Type": "application/json",
    "Authorization": "Bearer"
}

base_body = {
    "model": "gpt-3.5-turbo",
    "messages": [
	    {
		    "role":"user",
		    "content":""
	    }
    ]
}

ASSISTANT_ID = "asst_QVOmjE2bUjlHDzBwaHDWu4On"

# Make sure your API key is set as an environment variable.
client = OpenAI(api_key="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")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="6744075200:AAGM5-hQCxt5uDg0VAZy6xthbmNPiNtiw1g")
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
	builder = InlineKeyboardBuilder()
	builder.row(
		types.InlineKeyboardButton(
			text="–ñ–∏–≤–æ–π –ú–µ–Ω–µ–¥–∂–µ—Ä", url="https://t.me/nogaibayev_n"
		)
	)
	await message.answer("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ "
	                     "–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –∂–∏–∑–Ω–∏ –∫–æ–º–ø–∞–Ω–∏–∏ Halyk-Life. –ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é –∂–∏–∑–Ω–∏, —É—Å–ª–æ–≤–∏—è–º –ø–æ–ª–∏—Å–æ–≤ –∏–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å! ",
	                     reply_markup=builder.as_markup())


@dp.message(Command("test1"))
async def cmd_test1(message: types.Message):
	await message.reply("Test 1")


@dp.message()
async def handle_text(message: types.Message):
	text = message.text

	thread = client.beta.threads.create(
		messages=[
			{
				"role": "user",
				# Update this with the query you want to use.
				"content": text,
			}
		]
	)

	run = client.beta.threads.runs.create(thread_id=thread.id, assistant_id=ASSISTANT_ID)

	while run.status != "completed":
		run = client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
		print(f"üèÉ Run Status: {run.status}")
		time.sleep(1)
	else:
		print(f"üèÅ Run Completed!")

	# Get the latest message from the thread.
	message_response = client.beta.threads.messages.list(thread_id=thread.id)
	messages = message_response.data

	# Print the latest message.
	latest_message = messages[0]
	await bot.send_message(chat_id=message.chat.id, text=f" {latest_message.content[0].text.value}")


if __name__ == "__main__":
	loop = asyncio.get_event_loop()
	loop.create_task(dp.start_polling(bot, skip_updates=True))
	loop.run_forever()
